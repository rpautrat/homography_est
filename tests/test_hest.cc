#include <gtest/gtest.h>
#include <hest.h>

TEST(HestTest, SimpleRansac) {
  std::vector<Eigen::Vector2d> points1 = {
      {0, 0},
      {0, 10},
      {10, 10},
      {10, 0},
  };
  std::vector<Eigen::Vector2d> points2 = {
      {10, 0},
      {10, 10},
      {20, 10},
      {20, 0},
  };

  Eigen::Matrix3d expected{
      {1., 0., -10.},
      {0., 1., 0.},
      {0., 0., 1.}
  };

  Eigen::Matrix3d H = hest::estimateHomographyPoints(points1, points2, false);
  H = H / H(2, 2);

  ASSERT_TRUE(expected.isApprox(H));
}

//TEST(HestTest, EasyPair) {
//  std::vector<Eigen::Vector2d> points1 = {
//      {33.322292, 341.61472}, {25.765976, 0.560574}, {55.05515, 319.79477}, {34.61903, 11.624736},
//      {31.321823, 11.539971}, {43.24672, 319.57495}, {23.989353, 346.73163}, {43.392605, 4.579115},
//      {61.46539, 259.36032}, {112.80639, 478.5211}, {105.87941, 250.51886}, {28.147934, 365.54736}, {0.5, 185.5},
//      {72.649635, 368.08624}, {58.473072, 358.67023}, {51.940968, 319.26117}, {10.953377, 477.49838},
//      {10.823789, 441.49884}, {21.150814, 478.71097}, {44.629936, 351.4921}, {44.3663, 347.08115},
//      {55.666645, 370.4524}, {98.56757, 444.48962}, {131.02597, 390.49887}, {130.97398, 412.50113},
//      {144.05888, 448.70224}, {141.22931, 428.538}, {6.329136, 401.5507}, {7.569674, 381.2597}, {118.931046, 446.50253},
//      {148.06212, 432.4526}, {150.139, 447.4475}, {65.56276, 311.55127}, {37.535374, 375.50052}, {44.129868, 442.53265},
//      {40.74766, 459.47064}, {3.232004, 371.9579}, {105., 194.}, {93., 216.}, {114., 258.}, {106., 281.}, {119., 289.},
//      {119., 302.}, {94., 303.}, {50., 306.}, {107., 323.}, {112., 324.}, {122., 345.}, {95., 348.}, {54., 358.},
//      {57., 363.}, {132., 367.}, {13., 415.}, {147., 461.}, {121., 467.}};
//  std::vector<Eigen::Vector2d> points2 = {
//      {5.363480e+02, 2.462727e+02}, {5.617516e+02, 3.786931e-01}, {5.575885e+02, 2.291653e+02},
//      {5.738066e+02, 5.283026e-01}, {5.679614e+02, 4.487425e-01}, {5.468354e+02, 2.283034e+02},
//      {5.257529e+02, 2.489265e+02}, {5.868634e+02, -2.029230e-02}, {5.760000e+02, 1.730000e+02},
//      {5.885649e+02, 4.006125e+02}, {6.220850e+02, 1.633614e+02}, {5.283262e+02, 2.649922e+02},
//      {5.298994e+02, 1.177995e+02}, {5.678438e+02, 2.713834e+02}, {5.555954e+02, 2.665095e+02},
//      {5.543120e+02, 2.306367e+02}, {5.043735e+02, 3.553358e+02}, {5.095781e+02, 3.207583e+02},
//      {5.082869e+02, 3.550514e+02}, {5.442742e+02, 2.576052e+02}, {5.439070e+02, 2.544165e+02},
//      {5.521552e+02, 2.801203e+02}, {5.800000e+02, 3.580000e+02}, {6.249430e+02, 3.221316e+02},
//      {6.206968e+02, 3.435680e+02}, {6.311077e+02, 3.863644e+02}, {6.278945e+02, 3.666554e+02},
//      {5.088807e+02, 2.920540e+02}, {5.127943e+02, 2.742032e+02}, {6.023845e+02, 3.707468e+02},
//      {6.371925e+02, 3.735131e+02}, {6.358014e+02, 3.893561e+02}, {5.655746e+02, 2.304521e+02},
//      {5.352028e+02, 2.755410e+02}, {5.342270e+02, 3.350113e+02}, {5.296886e+02, 3.464696e+02},
//      {5.113220e+02, 2.653076e+02}, {6.310000e+02, 9.700000e+01}, {6.150000e+02, 1.240000e+02},
//      {6.310000e+02, 1.740000e+02}, {6.160000e+02, 1.990000e+02}, {6.310000e+02, 2.100000e+02},
//      {6.310000e+02, 2.240000e+02}, {5.990000e+02, 2.210000e+02}, {5.540000e+02, 2.170000e+02},
//      {6.100000e+02, 2.460000e+02}, {6.160000e+02, 2.470000e+02}, {6.240000e+02, 2.710000e+02},
//      {5.930000e+02, 2.660000e+02}, {5.510000e+02, 2.650000e+02}, {5.530000e+02, 2.700000e+02},
//      {6.310000e+02, 2.970000e+02}, {5.152554e+02, 3.022223e+02}, {6.310000e+02, 3.990000e+02},
//      {5.990000e+02, 3.900000e+02}};
//  std::vector<hest::LineSegment> line_segments1 = {
//      {{33.322292, 341.61472}, {25.765976, 0.560574}}, {{55.05515, 319.79477}, {34.61903, 11.624736}},
//      {{31.321823, 11.539971}, {43.24672, 319.57495}}, {{14.072469, 39.4841}, {23.989353, 346.73163}},
//      {{43.392605, 4.579115}, {61.46539, 259.36032}}, {{112.80639, 478.5211}, {105.87941, 250.51886}},
//      {{37.55622, 435.49243}, {28.147934, 365.54736}}, {{0.5, 123.5}, {0.5, 185.5}},
//      {{72.649635, 368.08624}, {91.91945, 421.62924}}, {{58.473072, 358.67023}, {51.940968, 319.26117}},
//      {{10.953377, 477.49838}, {10.823789, 441.49884}}, {{40.59774, 389.50055}, {40.41642, 422.49954}},
//      {{43.24672, 319.57495}, {44.629936, 351.4921}}, {{35.66136, 478.83432}, {32.586433, 452.72537}},
//      {{44.3663, 347.08115}, {55.666645, 370.4524}}, {{131.02597, 390.49887}, {130.97398, 412.50113}},
//      {{144.05888, 448.70224}, {141.22931, 428.538}}, {{6.329136, 401.5507}, {7.569674, 381.2597}},
//      {{119.03662, 428.49728}, {118.931046, 446.50253}}, {{68.51433, 328.5}, {68.506165, 345.5005}},
//      {{148.06212, 432.4526}, {150.139, 447.4475}}, {{2.784638, 197.47012}, {3.134324, 212.5085}},
//      {{37.535374, 375.50052}, {37.316086, 390.51193}}, {{40.74766, 459.47064}, {40.238003, 472.5288}},
//      {{61.585266, 425.50037}, {61.537907, 436.50015}}, {{3.232004, 371.9579}, {1.06513, 363.05212}}};
//  std::vector<hest::LineSegment> line_segments2 = {
//      {{5.363480e+02, 2.462727e+02}, {5.617516e+02, 3.786931e-01}},
//      {{5.575885e+02, 2.291653e+02}, {5.738066e+02, 5.283026e-01}},
//      {{5.679614e+02, 4.487425e-01}, {5.468354e+02, 2.283034e+02}},
//      {{5.510457e+02, 1.669815e-01}, {5.257529e+02, 2.489265e+02}},
//      {{5.868634e+02, -2.029230e-02}, {5.655746e+02, 2.304521e+02}},
//      {{5.885649e+02, 4.006125e+02}, {6.220850e+02, 1.633614e+02}},
//      {{5.296886e+02, 3.464696e+02}, {5.283262e+02, 2.649922e+02}},
//      {{5.298994e+02, 1.177995e+02}, {5.361643e+02, 2.916606e+01}},
//      {{5.678438e+02, 2.713834e+02}, {5.900209e+02, 4.378556e+02}},
//      {{5.555954e+02, 2.665095e+02}, {5.543120e+02, 2.306367e+02}},
//      {{5.043735e+02, 3.553358e+02}, {5.095781e+02, 3.207583e+02}},
//      {{5.352028e+02, 2.755410e+02}, {5.342270e+02, 3.350113e+02}},
//      {{5.468354e+02, 2.283034e+02}, {5.442742e+02, 2.576052e+02}},
//      {{5.253801e+02, 4.152198e+02}, {5.208240e+02, 3.179646e+02}},
//      {{5.439070e+02, 2.544165e+02}, {5.521552e+02, 2.801203e+02}},
//      {{6.249430e+02, 3.221316e+02}, {6.206968e+02, 3.435680e+02}},
//      {{6.311077e+02, 3.863644e+02}, {6.278945e+02, 3.666554e+02}},
//      {{5.088807e+02, 2.920540e+02}, {5.127943e+02, 2.742032e+02}},
//      {{6.029689e+02, 3.407304e+02}, {6.023845e+02, 3.707468e+02}},
//      {{5.655746e+02, 2.304521e+02}, {5.712502e+02, 2.706321e+02}},
//      {{6.371925e+02, 3.735131e+02}, {6.358014e+02, 3.893561e+02}},
//      {{5.332153e+02, 1.068823e+01}, {5.229736e+02, 1.506705e+02}},
//      {{5.310484e+02, 2.563593e+02}, {5.352028e+02, 2.755410e+02}},
//      {{5.261896e+02, 3.350268e+02}, {5.345194e+02, 4.093396e+02}},
//      {{5.491666e+02, 3.050017e+02}, {5.507125e+02, 4.122664e+02}},
//      {{5.113220e+02, 2.653076e+02}, {5.055905e+02, 2.522000e+02}}};
//  Eigen::Matrix3d expected({{-5.958643e-04, 3.843092e-04, 9.825144e-01}, {-6.222673e-04, 2.077457e-03, -1.861639e-01},
//                            {-4.191957e-06, 1.141517e-06, 1.790467e-03}});
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
//                                                      3, false, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.001));
//}
//
//TEST(HestTest, LineDegeneratedExample1){
//  std::vector<Eigen::Vector2d> points1 = {{213.59877,5.954884},{202.4221,3.929899},{142.44936,11.726912},{192.,20.},{193.,33.},{192.,45.},{172.,46.},{171.,54.},{151.,64.},{171.,66.},{161.,67.},{49.,70.},{192.,70.},{213.,73.},{102.,74.},{213.,83.},{150.,89.},{170.,89.},{194.,94.},{48.,95.},{212.,97.},{103.,104.},{150.,110.},{163.,112.},{172.,113.},{20.,115.},{103.,119.},{77.,125.},{101.,128.},{127.,128.},{173.,136.},{190.,136.},{127.,139.},{213.,139.},{20.,141.},{76.,145.},{12.,150.},{104.,150.},{125.,153.},{150.,154.},{171.,154.},{193.,156.},{51.,157.},{68.,169.},{50.,170.},{125.,173.},{151.,177.},{172.,178.},{171.,187.},{20.,188.},{50.,190.},{61.,192.},{74.,194.},{128.,194.},{137.,195.},{152.,195.},{171.,198.},{196.,198.},{124.,207.},{47.,214.},{79.,214.},{126.,217.},{171.,217.},{150.,219.},{171.,227.},{195.,227.},{22.,235.},{127.,236.},{56.,237.},{75.,237.},{47.,238.},{88.,239.},{114.,239.},{103.,240.},{172.,247.},{103.,249.},{126.,249.},{141.,257.},{172.,257.},{49.,259.},{78.,259.},{32.,260.},{127.,260.},{18.,261.},{150.,261.},{150.,266.},{127.,269.},{102.,272.},{149.,276.},{172.,277.},{125.,279.},{79.,282.},{50.,283.},{20.,285.},{102.,288.},{150.,288.},{151.,298.},{172.,298.},{130.,300.},{161.,301.},{84.,302.},{18.,308.},{50.,308.},{78.,324.},{103.,330.},{149.,333.},{20.,334.},{103.,337.},{51.,354.},{19.,358.}};
//  std::vector<Eigen::Vector2d> points2 = {{599.54236,87.6141},{585.28046,92.90856},{525.92303,127.45902},{578.,112.},{581.,126.},{582.,135.},{559.,147.},{560.,152.},{540.,171.},{562.,166.},{552.,168.},{458.,206.},{586.,159.},{614.,153.},{497.,196.},{617.,165.},{545.,194.},{566.,186.},{593.,184.},{459.,226.},{619.,178.},{502.,221.},{548.,214.},{562.,211.},{573.,210.},{441.,247.},{504.,233.},{483.,244.},{504.,243.},{527.,235.},{578.,233.},{599.,229.},{529.,248.},{631.,224.},{444.,267.},{484.,262.},{438.,276.},{510.,262.},{529.,261.},{555.,256.},{579.,252.},{607.,250.},{465.,276.},{479.,285.},{466.,287.},{533.,281.},{560.,280.},{586.,278.},{587.,289.},{446.,306.},{469.,305.},{478.,306.},{487.,306.},{538.,302.},{548.,301.},{565.,300.},{590.,302.},{622.,298.},{537.,315.},{468.,328.},{495.,325.},{541.,329.},{593.,323.},{566.,326.},{596.,337.},{631.,337.},{453.,347.},{544.,348.},{480.,348.},{495.,349.},{469.,349.},{507.,350.},{530.,350.},{520.,351.},{602.,361.},{522.,360.},{545.,359.},{563.,371.},{605.,373.},{474.,370.},{499.,371.},{462.,371.},{549.,374.},{450.,371.},{576.,375.},{578.,384.},{551.,385.},{525.,385.},{578.,396.},{607.,397.},{550.,395.},{503.,394.},{478.,393.},{454.,393.},{526.,405.},{581.,409.},{586.,423.},{614.,425.},{560.,422.},{601.,429.},{513.,418.},{455.,415.},{481.,419.},{508.,441.},{534.,452.},{591.,468.},{459.,441.},{537.,462.},{486.,468.},{460.,466.}};
//  std::vector<hest::LineSegment> line_segments1 = {{{0.422657,38.632618},{149.5199,25.168306}},{{213.59877,5.954884},{202.4221,3.929899}},{{142.44936,11.726912},{132.49863,9.506127}},{{54.366028,20.029202},{44.492508,17.529596}},{{2.743533,55.573875},{11.65336,57.91679}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{402.86957,207.68326},{639.0793,80.58112}},{{599.54236,87.6141},{585.28046,92.90856}},{{525.92303,127.45902},{482.31055,151.90833}},{{463.20648,162.93536},{431.46613,179.43481}},{{419.67166,210.90776},{440.37085,202.19324}}};
//  Eigen::Matrix3d expected({{-1.176095e-01,-2.347600e-01,5.816344e+02},{-7.362794e-01,7.839953e-01,2.340035e+02},{-2.096863e-03,-7.336250e-04,1.378353e+00}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  // Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
//  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
//                                                      3, false, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
////  std::cout << "GT H: \n" << expected << std::endl;
////  std::cout << "Estimated H: \n" << H << std::endl;
////  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
////  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}

TEST(HestTest, LineDegeneratedExample2){
  std::vector<Eigen::Vector2d> points1 = {{35.4479,24.487549},{34.607758,95.47761},{52.905296,110.03256},{39.56109,24.37202},{38.883255,99.43943},{41.744396,16.97757},{10.,30.},{150.,38.},{73.,49.},{51.,52.},{103.,57.},{22.,66.},{107.,81.},{119.,83.},{126.,85.},{105.,104.},{119.,106.},{126.,108.},{21.,123.},{77.,124.},{103.,129.},{21.,136.},{50.,144.},{73.,144.},{60.,147.},{50.,159.},{49.,164.},{61.,168.},{66.,169.},{76.,170.},{103.,172.},{24.,182.},{39.,194.},{50.,194.},{39.,202.},{51.,205.},{24.,211.},{62.,214.},{78.,215.},{78.,235.},{53.,236.},{39.,260.},{38.,283.},{27.,284.},{51.,284.}};
  std::vector<Eigen::Vector2d> points2 = {{519.0558,221.83603},{531.64233,275.93222},{546.5064,283.8466},{521.49994,218.57434},{535.4986,276.9801},{521.49713,212.79076},{503.,232.},{621.,181.},{552.,226.},{536.,236.},{580.,222.},{517.,256.},{590.,238.},{602.,237.},{612.,235.},{595.,262.},{609.,259.},{618.,257.},{527.,302.},{574.,290.},{601.,287.},{529.,313.},{555.,315.},{576.,310.},{566.,314.},{559.,328.},{559.,335.},{569.,336.},{574.,336.},{587.,336.},{616.,333.},{542.,355.},{559.,368.},{569.,368.},{559.,373.},{571.,377.},{549.,385.},{585.,385.},{603.,386.},{609.,410.},{582.,411.},{576.,439.},{582.,466.},{571.,467.},{597.,469.}};
  std::vector<hest::LineSegment> line_segments1 = {{{35.4479,24.487549},{34.607758,95.47761}},{{0.228339,95.4836},{52.905296,110.03256}},{{-0.754628,5.128477},{39.56109,24.37202}},{{38.883255,99.43943},{-0.800544,85.09893}},{{41.744396,16.97757},{7.324293,0.875597}}};
  std::vector<hest::LineSegment> line_segments2 = {{{519.0558,221.83603},{531.64233,275.93222}},{{452.95325,283.62714},{546.5064,283.8466}},{{446.5011,218.49257},{521.49994,218.57434}},{{535.4986,276.9801},{452.7856,275.88098}},{{521.49713,212.79076},{425.48672,211.8378}}};
  Eigen::Matrix3d expected({{-3.145121e-01,-3.507000e-01,6.490993e+02},{-9.121188e-01,6.454459e-01,2.834298e+02},{-2.195508e-03,-1.095938e-03,1.318120e+00}});

  expected = expected / expected(2, 2);

  std::vector<int> inlier_pts_ind, inlier_lin_ind;
  // This works
  // Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);

  // This doesn't work
  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
                                                      3, false, &inlier_pts_ind, &inlier_lin_ind);
  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
  ASSERT_GE(inlier_pts_ind.size(), 4);
  ASSERT_GE(inlier_lin_ind.size(), 4);
  ASSERT_TRUE(expected.isApprox(H, 0.3));
}

//TEST(HestTest, LineDegeneratedExample3){
//  std::vector<Eigen::Vector2d> points1 = {{144.11288,478.51382},{141.81917,105.8667},{150.47371,106.50014},{103.08739,142.50314},{6.564839,196.5525},{12.530849,202.63605},{48.53791,195.08531},{136.36862,175.48996},{169.77704,130.48451},{145.5339,87.80354},{180.51231,156.9116},{169.43791,113.6712},{228.25266,159.0773},{126.,9.},{131.,38.},{99.,47.},{188.,121.},{191.,128.},{180.,129.},{77.,147.},{79.,170.},{168.,177.},{173.,177.},{90.,192.},{102.,279.},{79.,280.},{80.,374.}};
//  std::vector<Eigen::Vector2d> points2 = {{420.3915,478.61188},{407.453,231.15909},{417.52527,238.61469},{376.0732,262.50153},{225.51486,273.3201},{276.99222,286.51703},{300.56885,288.49857},{414.41693,277.49826},{434.6827,253.47476},{418.53638,228.22887},{445.22583,268.09106},{434.54492,241.38553},{469.55823,268.46075},{353.3855,161.79276},{373.,184.},{353.,188.},{447.14178,246.8834},{446.57727,254.26636},{438.7823,247.93974},{343.,262.},{343.,280.},{432.3603,287.55774},{438.18445,278.81992},{353.33432,294.50085},{377.77515,348.496},{344.,357.},{343.,400.}};
//  std::vector<hest::LineSegment> line_segments1 = {{{451.3614,0.49818},{445.0843,478.50766}},{{384.39594,48.510002},{379.5945,478.5122}},{{144.11288,478.51382},{141.81917,105.8667}},{{150.47371,106.50014},{152.42911,478.5109}},{{101.57753,393.4828},{97.68343,149.49707}},{{103.08739,142.50314},{104.859245,375.48965}},{{172.76686,478.52545},{171.74246,368.48843}},{{138.8519,419.49734},{139.29802,478.5091}},{{52.706387,199.50145},{52.746918,249.50223}},{{9.299029,247.21764},{6.564839,196.5525}},{{46.079735,249.63672},{43.30783,200.56735}},{{136.05653,148.50513},{136.36862,175.48996}},{{170.08035,155.49297},{169.77704,130.48451}},{{18.253744,232.49673},{18.171524,213.4971}},{{197.50487,157.26715},{180.51231,156.9116}},{{169.43791,113.6712},{155.14218,108.48661}},{{141.81917,105.8667},{153.50793,102.52515}},{{19.09657,198.92152},{12.530849,202.63605}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{517.57025,268.8062},{548.00226,460.57898}},{{499.99615,263.38577},{525.1455,478.90405}},{{420.3915,478.61188},{407.453,231.15909}},{{417.52527,238.61469},{431.46725,478.67615}},{{353.14664,478.50067},{353.33432,294.50085}},{{376.0732,262.50153},{378.4649,318.5015}},{{446.4931,478.68286},{430.99094,308.5464}},{{425.5784,451.42584},{427.23523,475.51822}},{{301.03815,298.46857},{299.7826,319.8523}},{{225.51486,273.3201},{220.8903,324.35413}},{{294.60663,322.50708},{296.93057,287.46225}},{{415.15237,242.51372},{414.41693,277.49826}},{{434.6827,253.47476},{438.18445,278.81992}},{{278.0736,302.2836},{276.93546,314.3899}},{{460.47256,274.98334},{445.22583,268.09106}},{{434.54492,241.38553},{415.35965,233.85771}},{{407.453,231.15909},{418.53638,228.22887}},{{276.99222,286.51703},{276.5434,299.5015}}};
//  Eigen::Matrix3d expected({{1.141996e+00,-2.537788e-01,-5.254348e+02},{8.213667e-01,7.628337e-01,-3.034847e+02},{2.275213e-03,-7.930588e-04,-1.431907e-01}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
////  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
////                                                      3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}
//
//TEST(HestTest, LineDegeneratedExample4){
//  std::vector<Eigen::Vector2d> points1 = {{508.36932,355.8161},{452.25742,410.02917},{465.56644,374.90408},{539.79285,459.70807},{518.3588,422.57806},{476.90762,363.1741},{539.51874,475.49942},{511.43744,464.83176},{455.20886,405.23578},{523.73975,470.18918},{512.48145,438.96548},{43.,213.},{60.,215.},{451.,238.},{84.,260.},{451.,297.},{462.,297.}};
//  std::vector<Eigen::Vector2d> points2 = {{248.24371,224.47546},{156.32994,185.29263},{203.2775,177.74878},{149.47241,269.94406},{173.31691,240.1139},{208.28516,177.97472},{137.48363,285.489},{127.604065,257.60788},{152.4163,190.1453},{139.64787,271.3687},{167.49127,247.09093},{569.,29.},{585.,31.},{300.,11.},{598.,85.},{250.,102.},{262.,102.}};
//  std::vector<hest::LineSegment> line_segments1 = {{{508.36932,355.8161},{553.28644,391.76797}},{{452.25742,410.02917},{465.56644,374.90408}},{{539.64844,425.36658},{518.3588,422.57806}},{{489.30316,357.35104},{508.36932,355.8161}},{{464.48383,378.84833},{476.90762,363.1741}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{248.24371,224.47546},{250.11955,249.24004}},{{156.32994,185.29263},{208.28516,177.97472}},{{193.60043,246.16324},{173.31691,240.1139}},{{215.98367,181.9144},{248.24371,224.47546}},{{203.2775,177.74878},{215.98367,181.9144}}};
//  Eigen::Matrix3d expected({{-2.825006e-01,3.564901e-01,4.714760e+02},{-1.321061e-01,1.172632e+00,-2.164948e+02},{-2.164824e-03,1.114032e-03,7.967545e-01}});
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
////  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
////                                                      3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}
//
//TEST(HestTest, LineDegeneratedExample5) {
//  std::vector<Eigen::Vector2d> points1 = {{233.25743,254.65921},{232.48824,202.48909},{268.2384,202.80295},{269.07056,252.50035},{237.11986,248.50406},{233.4494,199.06577},{244.37903,210.80002},{266.47,255.11139},{239.45634,204.02773},{238.46637,251.5667},{243.4648,246.93784}};
//  std::vector<Eigen::Vector2d> points2 = {{430.001,354.45493},{426.41525,103.937546},{617.,116.},{624.90814,332.5569},{456.,301.},{430.62537,95.57719},{486.4519,151.53502},{621.4634,338.06448},{435.90805,99.511345},{444.41302,347.59058},{481.64407,298.02612}};
//  std::vector<hest::LineSegment> line_segments1 = {{{233.25743,254.65921},{232.48824,202.48909}},{{265.77197,247.5126},{264.81442,207.28741}},{{233.4494,199.06577},{268.2384,202.80295}},{{266.47,255.11139},{233.25743,254.65921}},{{238.46637,251.5667},{262.5792,250.69788}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{430.001,354.45493},{426.41525,103.937546}},{{617.975,138.5545},{624.90814,332.5569}},{{430.62537,95.57719},{616.1898,120.78352}},{{621.4634,338.06448},{434.35684,353.79733}},{{444.41302,347.59058},{619.6277,330.8355}}};
//  Eigen::Matrix3d expected({{1.187714e+00,-4.653370e-02,-5.747148e+02},{6.166490e-01,9.635608e-01,-3.158747e+02},{2.360997e-03,-1.454178e-04,-2.890891e-01}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
////  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
//    Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
//                                                        3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}
//
//TEST(HestTest, LineDegeneratedExample6) {
//  std::vector<Eigen::Vector2d> points1 = {{296.00586,478.16147},{397.99347,191.876},{418.16272,193.79175},{446.36148,194.57854},{540.1128,196.00885},{526.99335,197.23552},{563.623,201.87682},{302.64655,299.37323},{481.38647,132.83923},{411.82684,191.31929},{428.0956,181.13853},{563.7073,149.82605},{567.60767,166.40866},{400.52957,193.4957},{495.0537,118.259964},{621.9565,128.21191},{480.55032,27.88122},{457.85495,117.69541},{604.36926,132.83023},{40.,405.},{47.,431.},{76.,450.}};
//  std::vector<Eigen::Vector2d> points2 = {{8.037333e+00,2.533128e+02},{1.397087e+01,1.331940e+02},{5.076786e+01,1.354240e+02},{3.902934e+01,1.337728e+02},{7.349705e+01,1.343262e+02},{6.329534e+01,1.356011e+02},{8.557635e+01,1.354699e+02},{-3.923818e-01,1.932678e+02},{2.903510e+01,1.055159e+02},{2.709776e+01,1.346976e+02},{5.446695e+01,1.311575e+02},{7.584661e+01,1.140915e+02},{8.491718e+01,1.211814e+02},{2.100000e+01,1.360000e+02},{3.806404e+01,9.792790e+01},{1.260000e+02,1.030000e+02},{1.218824e+02,2.558542e+01},{1.429821e+01,1.025008e+02},{1.131512e+02,1.039516e+02},{5.410000e+02,3.040000e+02},{5.410000e+02,3.270000e+02},{5.670000e+02,3.550000e+02}};
//  std::vector<hest::LineSegment> line_segments1 = {{{315.1715,478.1744},{318.18726,190.88286}},{{397.99347,191.876},{400.18567,478.14752}},{{417.08826,478.14752},{418.16272,193.79175}},{{461.49207,478.14883},{462.07205,194.81119}},{{446.36148,194.57854},{445.33127,478.14203}},{{540.74884,478.14725},{540.1128,196.00885}},{{489.527,195.77165},{487.79703,478.13156}},{{597.2936,199.37975},{596.84015,478.13104}},{{575.73566,478.1332},{576.3198,203.1132}},{{607.2723,431.64688},{608.915,191.73526}},{{301.98193,478.13004},{302.64655,299.37323}},{{536.90704,189.82693},{396.7815,184.20596}},{{539.22894,115.80096},{635.7466,125.68802}},{{461.48553,166.8596},{481.38647,132.83923}},{{411.82684,191.31929},{446.36148,194.57854}},{{638.6489,436.54053},{607.2723,431.64688}},{{557.7695,131.62572},{559.43304,154.27895}},{{563.7073,149.82605},{567.60767,166.40866}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{1.962963e+01,2.510012e+02},{1.040412e-01,1.344623e+02}},{{1.397087e+01,1.331940e+02},{3.448043e+01,2.543568e+02}},{{5.184460e+01,2.960302e+02},{2.709776e+01,1.346976e+02}},{{7.590720e+01,3.042935e+02},{5.076786e+01,1.354240e+02}},{{3.902934e+01,1.337728e+02},{6.584698e+01,3.043094e+02}},{{9.516238e+01,2.994357e+02},{7.349705e+01,1.343262e+02}},{{6.329534e+01,1.356011e+02},{8.642265e+01,3.006884e+02}},{{1.328019e+02,2.957916e+02},{1.158276e+02,1.354712e+02}},{{1.142966e+02,2.943844e+02},{9.537067e+01,1.367554e+02}},{{1.259000e+02,1.357288e+02},{1.393628e+02,2.621425e+02}},{{-3.923818e-01,1.932678e+02},{8.037333e+00,2.533128e+02}},{{5.446695e+01,1.311575e+02},{3.902934e+01,1.337728e+02}},{{8.560192e+01,1.022484e+02},{1.131512e+02,1.039516e+02}},{{2.433507e+01,1.201643e+02},{2.903510e+01,1.055159e+02}},{{2.709776e+01,1.346976e+02},{3.902934e+01,1.337728e+02}},{{1.786213e+02,2.854243e+02},{1.448444e+02,2.607867e+02}},{{8.959337e+01,1.200335e+02},{8.175327e+01,1.077506e+02}},{{7.584661e+01,1.140915e+02},{8.491718e+01,1.211814e+02}}};
//  Eigen::Matrix3d expected({{-3.833882e-01,1.868510e-01,5.483519e+02},{-3.623274e-01,1.115030e+00,-9.577369e+01},{-2.369839e-03,5.839094e-04,9.837555e-01}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
////  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
////                                                      3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}
//
//TEST(HestTest, LineDegeneratedExample7)
//{
//std::vector<Eigen::Vector2d> points1 = {{452.526,279.8401},{452.49182,263.34683},{451.39786,245.6787},{450.48126,236.02287},{573.26025,384.61624},{573.1625,167.48778},{511.70886,362.5881},{638.8699,397.50842},{590.9702,135.08286},{462.9943,261.57257},{568.5641,127.41511},{585.9676,140.55646},{603.76636,212.56297},{598.42847,184.39505},{597.33795,189.82047},{461.662,225.34637},{601.4514,140.1738},{598.53564,214.57393},{582.88446,210.37944},{582.1258,220.54669},{600.91254,162.43399},{600.08624,221.67758},{453.79654,236.28102},{583.7317,143.72168},{596.25604,180.57143},{598.,120.}};
//std::vector<Eigen::Vector2d> points2 = {{72.,87.},{69.,68.},{97.86241,70.6242},{115.012566,66.182045},{354.81332,292.03693},{366.258,126.7313},{179.01358,216.62892},{303.6788,270.89246},{393.43478,69.28956},{125.708115,89.44946},{376.9435,67.35557},{388.50302,73.35238},{390.03793,154.8615},{389.0347,129.78487},{387.042,137.83418},{133.5532,51.778015},{397.84808,81.29756},{386.47803,157.85854},{376.9136,148.84798},{372.64633,171.97214},{393.66928,97.5582},{391.85336,169.10435},{120.5576,66.78889},{390.,89.},{387.8536,123.601524},{515.,54.}};
//std::vector<hest::LineSegment> line_segments1 = {{{4.943204e-01,2.231988e+02},{4.552777e+02,2.248949e+02}},{{4.648858e-01,2.417323e+02},{4.504813e+02,2.360229e+02}},{{5.732603e+02,3.846162e+02},{5.731625e+02,1.674878e+02}},{{5.748255e+02,3.793329e+02},{6.393868e+02,4.030900e+02}},{{5.117089e+02,3.625881e+02},{5.732603e+02,3.846162e+02}},{{4.685564e+02,2.304959e+02},{4.723676e+02,2.826558e+02}},{{5.909702e+02,1.350829e+02},{6.394456e+02,1.206833e+02}},{{4.593784e+02,2.363739e+02},{4.629943e+02,2.615726e+02}},{{6.258270e+02,2.149755e+02},{6.037664e+02,2.125630e+02}},{{6.246280e+02,1.526954e+02},{6.061969e+02,1.546686e+02}},{{6.100165e+02,1.658954e+02},{6.246620e+02,1.609958e+02}},{{5.691850e+02,1.691254e+02},{5.805544e+02,1.595648e+02}},{{6.146064e+02,1.382144e+02},{6.014514e+02,1.401738e+02}},{{6.101430e+02,1.954102e+02},{6.225732e+02,1.931566e+02}},{{5.828845e+02,2.103794e+02},{5.821258e+02,2.205467e+02}},{{6.000862e+02,2.216776e+02},{6.092614e+02,2.248029e+02}},{{5.628451e+02,1.434426e+02},{5.608621e+02,1.344207e+02}},{{5.837317e+02,1.437217e+02},{5.788445e+02,1.488296e+02}}};
//std::vector<hest::LineSegment> line_segments2 = {{{4.096923e-01,4.291359e+01},{1.335532e+02,5.177802e+01}},{{1.150126e+02,6.618204e+01},{5.872629e-01,6.034885e+01}},{{3.660981e+02,2.819432e+02},{3.779277e+02,1.777030e+02}},{{2.243763e+02,2.431736e+02},{2.671174e+02,2.620082e+02}},{{1.790136e+02,2.166289e+02},{3.036788e+02,2.708925e+02}},{{1.335532e+02,5.177802e+01},{1.506010e+02,2.186878e+02}},{{3.934348e+02,6.928956e+01},{4.631729e+02,6.456989e+01}},{{1.257081e+02,8.944946e+01},{1.205576e+02,6.678889e+01}},{{4.542518e+02,1.708367e+02},{3.900379e+02,1.548615e+02}},{{4.650020e+02,9.046270e+01},{3.949951e+02,8.990444e+01}},{{3.936693e+02,9.755820e+01},{4.648522e+02,9.976552e+01}},{{3.662580e+02,1.267313e+02},{3.741230e+02,9.404794e+01}},{{4.607133e+02,8.062408e+01},{3.978481e+02,8.129756e+01}},{{4.466645e+02,1.448814e+02},{3.905131e+02,1.363195e+02}},{{3.769136e+02,1.488480e+02},{3.726463e+02,1.719721e+02}},{{3.898599e+02,1.644368e+02},{3.871415e+02,1.933580e+02}},{{3.642785e+02,9.390869e+01},{3.769435e+02,6.735557e+01}},{{3.885030e+02,7.335238e+01},{3.906389e+02,9.357939e+01}}};
//Eigen::Matrix3d expected({{-3.364283e-01,3.213573e-01,4.956721e+02},{-1.834504e-01,1.164775e+00,-1.920638e+02},{-2.240145e-03,1.004241e-03,8.272422e-01}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
////  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
////                                                      3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}
//
//TEST(HestTest, LineDegeneratedExample8) {
//  std::vector<Eigen::Vector2d> points1 = {{144.11288,478.51382},{141.81917,105.8667},{150.47371,106.50014},{103.08739,142.50314},{6.564839,196.5525},{12.530849,202.63605},{48.53791,195.08531},{136.36862,175.48996},{169.77704,130.48451},{145.5339,87.80354},{180.51231,156.9116},{169.43791,113.6712},{228.25266,159.0773},{126.,9.},{131.,38.},{99.,47.},{188.,121.},{191.,128.},{180.,129.},{77.,147.},{79.,170.},{168.,177.},{173.,177.},{90.,192.},{102.,279.},{79.,280.},{80.,374.}};
//  std::vector<Eigen::Vector2d> points2 = {{420.3915,478.61188},{407.453,231.15909},{417.52527,238.61469},{376.0732,262.50153},{225.51486,273.3201},{276.99222,286.51703},{300.56885,288.49857},{414.41693,277.49826},{434.6827,253.47476},{418.53638,228.22887},{445.22583,268.09106},{434.54492,241.38553},{469.55823,268.46075},{353.3855,161.79276},{373.,184.},{353.,188.},{447.14178,246.8834},{446.57727,254.26636},{438.7823,247.93974},{343.,262.},{343.,280.},{432.3603,287.55774},{438.18445,278.81992},{353.33432,294.50085},{377.77515,348.496},{344.,357.},{343.,400.}};
//  std::vector<hest::LineSegment> line_segments1 = {{{451.3614,0.49818},{445.0843,478.50766}},{{384.39594,48.510002},{379.5945,478.5122}},{{144.11288,478.51382},{141.81917,105.8667}},{{150.47371,106.50014},{152.42911,478.5109}},{{101.57753,393.4828},{97.68343,149.49707}},{{103.08739,142.50314},{104.859245,375.48965}},{{172.76686,478.52545},{171.74246,368.48843}},{{138.8519,419.49734},{139.29802,478.5091}},{{52.706387,199.50145},{52.746918,249.50223}},{{9.299029,247.21764},{6.564839,196.5525}},{{46.079735,249.63672},{43.30783,200.56735}},{{136.05653,148.50513},{136.36862,175.48996}},{{170.08035,155.49297},{169.77704,130.48451}},{{18.253744,232.49673},{18.171524,213.4971}},{{197.50487,157.26715},{180.51231,156.9116}},{{169.43791,113.6712},{155.14218,108.48661}},{{141.81917,105.8667},{153.50793,102.52515}},{{19.09657,198.92152},{12.530849,202.63605}}};
//  std::vector<hest::LineSegment> line_segments2 = {{{517.57025,268.8062},{548.00226,460.57898}},{{499.99615,263.38577},{525.1455,478.90405}},{{420.3915,478.61188},{407.453,231.15909}},{{417.52527,238.61469},{431.46725,478.67615}},{{353.14664,478.50067},{353.33432,294.50085}},{{376.0732,262.50153},{378.4649,318.5015}},{{446.4931,478.68286},{430.99094,308.5464}},{{425.5784,451.42584},{427.23523,475.51822}},{{301.03815,298.46857},{299.7826,319.8523}},{{225.51486,273.3201},{220.8903,324.35413}},{{294.60663,322.50708},{296.93057,287.46225}},{{415.15237,242.51372},{414.41693,277.49826}},{{434.6827,253.47476},{438.18445,278.81992}},{{278.0736,302.2836},{276.93546,314.3899}},{{460.47256,274.98334},{445.22583,268.09106}},{{434.54492,241.38553},{415.35965,233.85771}},{{407.453,231.15909},{418.53638,228.22887}},{{276.99222,286.51703},{276.5434,299.5015}}};
//  Eigen::Matrix3d expected({{1.141996e+00,-2.537788e-01,-5.254348e+02},{8.213667e-01,7.628337e-01,-3.034847e+02},{2.275213e-03,-7.930588e-04,-1.431907e-01}});
//
//  expected = expected / expected(2, 2);
//
//  std::vector<int> inlier_pts_ind, inlier_lin_ind;
//  // This works
//  Eigen::Matrix3d H = hest::ransacPointHomography(points2, points1, 3, &inlier_pts_ind);
//
//  // This doesn't work
////  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
////                                                      3, &inlier_pts_ind, &inlier_lin_ind);
//  H = H / H(2, 2);
//  std::cout << "GT H: \n" << expected << std::endl;
//  std::cout << "Estimated H: \n" << H << std::endl;
//  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
//  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
//}

TEST(HestTest, LineDegeneratedExample9) {
  std::vector<hest::LineSegment> line_segments1 = {
      {{5.192106e+02, 4.867362e-01}, {5.204780e+02, 2.595050e+02}},
      {{4.479425e+02, 4.150234e+01}, {4.482446e+02, 1.135011e+02}},
      {{4.616704e+02, 3.449778e+01}, {4.619050e+02, 5.250775e+01}},
      {{5.581827e+02, 2.815216e+02}, {5.577719e+02, 2.945086e+02}},
      {{5.626058e+02, 2.990449e+02}, {5.731703e+02, 2.929369e+02}},
      {{5.836385e+02, 2.825127e+02}, {5.735563e+02, 2.810983e+02}},
      {{5.890233e+02, 2.843566e+02}, {5.888921e+02, 2.945414e+02}},
      {{5.850159e+02, 2.762466e+02}, {5.890233e+02, 2.843566e+02}},
      {{5.687343e+02, 2.700905e+02}, {5.767085e+02, 2.719478e+02}},
      {{5.153138e+02, 2.632680e+02}, {5.164785e+02, 2.723748e+02}},
      {{4.551842e+02, 3.073088e+01}, {4.551842e+02, 3.073088e+01}}};
  std::vector<hest::LineSegment> line_segments2 = {
      {{1.458551e+02, 7.764498e-02}, {3.616091e+01, 4.292095e+02}},
      {{1.134076e+01, 1.928018e+02}, {2.046029e+00, 2.186960e+02}},
      {{3.848630e+01, 1.694939e+02}, {3.523196e+01, 1.768249e+02}},
      {{7.399129e+01, 4.536284e+02}, {6.951060e+01, 4.707643e+02}},
      {{7.550682e+01, 4.745088e+02}, {8.624015e+01, 4.661657e+02}},
      {{1.003509e+02, 4.509732e+02}, {9.034862e+01, 4.519501e+02}},
      {{1.055421e+02, 4.532002e+02}, {1.019553e+02, 4.665906e+02}},
      {{1.005632e+02, 4.428673e+02}, {1.055421e+02, 4.532002e+02}},
      {{8.748553e+01, 4.399435e+02}, {9.555807e+01, 4.397336e+02}},
      {{2.901524e+01, 4.340829e+02}, {2.490227e+01, 4.450811e+02}},
      {{-1.639204e-01, 1.513650e+02}, {3.313360e+01, 1.590811e+02}}};
  Eigen::Matrix3d expected({{1.155015e+00, -3.301729e-01, -4.851988e+02},
                            {8.543131e-01, 6.717014e-01, -2.577521e+02},
                            {2.118689e-03, -1.031790e-03, 8.202098e-03}});

  expected = expected / expected(2, 2);

  std::vector<int> inlier_pts_ind, inlier_lin_ind;
  // This works
  Eigen::Matrix3d H = hest::ransacLineHomography(line_segments2, line_segments1, 3, false, &inlier_pts_ind);

  H = H / H(2, 2);
  std::cout << "GT H: \n" << expected << std::endl;
  std::cout << "Estimated H: \n" << H << std::endl;
  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
//  ASSERT_GE(inlier_pts_ind.size(), 4);
//  ASSERT_GE(inlier_lin_ind.size(), 4);
//  ASSERT_TRUE(expected.isApprox(H, 0.3));
}

TEST(HestTest, ProblematicPair) {
  //TODO
  std::vector<Eigen::Vector2d> points1 = {
      {520.4780, 259.5050}, {519.8615, 274.5208}, {455.1842, 30.7309}, {441.3742, 45.1260}, {450.3365, 33.5390},
      {463.7924, 90.4924}, {464.3365, 111.5042}, {461.6704, 34.4978}, {461.9050, 52.5077}, {564.4286, 275.5515},
      {558.1827, 281.5216}, {557.7719, 294.5086}, {562.6058, 299.0449}, {573.1703, 292.9369}, {576.7085, 271.9478},
      {585.0159, 276.2466}, {583.6385, 282.5127}, {573.5563, 281.0983}, {589.0233, 284.3566}, {588.8921, 294.5414},
      {561.3786, 264.7051}, {568.7343, 270.0905}, {515.3138, 263.2680}, {516.4785, 272.3748}, {559.0000, 23.0000},
      {488.0000, 24.0000}, {587.0000, 46.0000}, {562.0000, 50.0000}, {585.0000, 70.0000}, {568.0000, 73.0000},
      {487.0000, 88.0000}, {480.0000, 89.0000}, {616.0000, 90.0000}, {598.0000, 120.0000}, {590.0000, 121.0000},
      {617.0000, 141.0000}, {532.0000, 151.0000}, {521.0000, 152.0000}, {616.0000, 166.0000}, {532.0000, 172.0000},
      {591.0000, 192.0000}, {501.0000, 195.0000}, {496.0000, 198.0000}, {589.0000, 214.0000}, {617.0000, 214.0000},
      {499.0000, 236.0000}, {590.0000, 247.0000}, {575.0000, 261.0000}, {582.0000, 261.0000}, {520.0000, 266.0000},
      {545.0000, 280.0000}, {522.0000, 296.0000}};
  std::vector<Eigen::Vector2d> points2 = {
      {36.1609, 429.2095}, {30.6303, 449.2665}, {33.1336, 159.0811}, {11.5802, 165.1142}, {26.2506, 162.4109},
      {24.0000, 224.0000}, {11.1666, 246.0668}, {38.4863, 169.4939}, {35.2320, 176.8249}, {79.0000, 449.0000},
      {73.9913, 453.6284}, {69.5106, 470.7643}, {75.5068, 474.5088}, {86.2402, 466.1657}, {95.5581, 439.7336},
      {100.5632, 442.8673}, {100.3509, 450.9732}, {90.3486, 451.9501}, {105.5421, 453.2002}, {101.9553, 466.5906},
      {82.0000, 433.0000}, {87.4855, 439.9435}, {29.0152, 434.0829}, {24.9023, 445.0811}, {132.0000, 201.0000},
      {70.0000, 172.0000}, {147.0000, 226.0000}, {130.0000, 223.0000}, {145.0000, 246.0000}, {131.0000, 245.0000},
      {55.0000, 230.0000}, {38.0000, 227.0000}, {161.0000, 270.0000}, {146.0000, 290.0000}, {140.0000, 290.0000},
      {156.0000, 310.0000}, {81.0000, 305.0000}, {70.0000, 303.0000}, {151.0000, 333.0000}, {76.0000, 327.0000},
      {126.0000, 354.0000}, {34.0000, 347.0000}, {26.0000, 349.0000}, {119.0000, 376.0000}, {143.0000, 378.0000},
      {12.0000, 398.0000}, {114.0000, 411.0000}, {99.0000, 427.0000}, {104.0000, 427.0000}, {31.0000, 440.0000},
      {60.0000, 454.0000}, {26.9995, 478.8882}};
  std::vector<hest::LineSegment> line_segments1 = {
      {{5.2667e+02, 4.7851e+02}, {5.2260e+02, 4.9917e-01}}, {{5.1921e+02, 4.8674e-01}, {5.2048e+02, 2.5951e+02}},
      {{4.5536e+02, 1.8350e+02}, {4.5034e+02, 3.3539e+01}}, {{4.4972e+02, 1.7749e+02}, {4.4137e+02, 4.5126e+01}},
      {{4.6167e+02, 3.4498e+01}, {4.6190e+02, 5.2508e+01}}, {{5.5818e+02, 2.8152e+02}, {5.5777e+02, 2.9451e+02}},
      {{5.6261e+02, 2.9904e+02}, {5.7317e+02, 2.9294e+02}}, {{5.8364e+02, 2.8251e+02}, {5.7356e+02, 2.8110e+02}},
      {{5.8902e+02, 2.8436e+02}, {5.8889e+02, 2.9454e+02}}, {{5.8502e+02, 2.7625e+02}, {5.8902e+02, 2.8436e+02}},
      {{5.6873e+02, 2.7009e+02}, {5.7671e+02, 2.7195e+02}}, {{5.1531e+02, 2.6327e+02}, {5.1648e+02, 2.7237e+02}},
      {{4.5518e+02, 3.0731e+01}, {4.5518e+02, 3.0731e+01}}};

  std::vector<hest::LineSegment> line_segments2 = {
      {{2.7000e+01, 4.7889e+02}, {1.5088e+02, 3.4039e-01}}, {{1.4586e+02, 7.7645e-02}, {3.6161e+01, 4.2921e+02}},
      {{6.1368e+00, 2.1873e+02}, {2.6251e+01, 1.6241e+02}}, {{-2.1200e+00, 2.1276e+02}, {1.0443e+01, 1.6820e+02}},
      {{3.8486e+01, 1.6949e+02}, {3.5232e+01, 1.7682e+02}}, {{7.3991e+01, 4.5363e+02}, {6.9511e+01, 4.7076e+02}},
      {{7.5507e+01, 4.7451e+02}, {8.6240e+01, 4.6617e+02}}, {{1.0035e+02, 4.5097e+02}, {9.0349e+01, 4.5195e+02}},
      {{1.0554e+02, 4.5320e+02}, {1.0196e+02, 4.6659e+02}}, {{1.0056e+02, 4.4287e+02}, {1.0554e+02, 4.5320e+02}},
      {{8.7486e+01, 4.3994e+02}, {9.5558e+01, 4.3973e+02}}, {{2.9015e+01, 4.3408e+02}, {2.4902e+01, 4.4508e+02}},
      {{3.2500e+01, 1.6416e+02}, {2.8202e+01, 1.7674e+02}}};

  std::vector<int> inlier_pts_ind, inlier_lin_ind;
  Eigen::Matrix3d H = hest::ransacPointLineHomography(points1, points2, line_segments1, line_segments2,
                                                      3, false, &inlier_pts_ind, &inlier_lin_ind);
//  Eigen::Matrix3d H = hest::ransacPointLineHomography(points2, points1, line_segments2, line_segments1,
//                                                      3, &inlier_pts_ind, &inlier_lin_ind);
  std::cout << "Estimated H: \n" << H << std::endl;
  std::cerr << "P Inliers: " << inlier_pts_ind.size() << std::endl;
  std::cerr << "L Inliers: " << inlier_lin_ind.size() << std::endl;
}

int main(int argc, char **argv) {
  // Se the maximum log level
  // Init and run the regression tests
  ::testing::InitGoogleTest(&argc, argv);
  int ret = RUN_ALL_TESTS();
  return ret;
}